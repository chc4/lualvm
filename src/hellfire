----    LLVM    ----
local llvmFlags = llvmFlags or assert (utils.shell ('llvm-config --cxxflags'),
		"Can't run `llvm-config`, do you have it in your PATH?")

local llvmIncludes = llvmIncludes or assert (utils.shell ('llvm-config --includedir'),
		"Can't run `llvm-config`, do you have it in your PATH?")

local llvmLib = llvmLib or assert (utils.shell ('llvm-config --system-libs --libs all'),
		"Can't run `llvm-config`, do you have it in your PATH?")

-- eliminate unwelcome '\n's
llvmLib = llvmLib:gsub ('\n', ' ')


----    Lua    ----
-- check for lua
local luaLib = luaLib or assert (utils.checkPkgConfig ('lua5.3', 'lua5.2', 'lua'),
		"Can't find lua lib through `pkg-config`, do you have it installed?")


----    SWIG Builder    ----
swig = Builder {
	cmd = 'swig $flags $lang -o $output $input',
	lang = 'lua',
	flags = utils.lazyPrefix ('-I', llvmIncludes),
	prepare_lang = function (l)
		return utils.lazyPrefix ('-', l)
	end,
	prepare_output = function (o, i)
		return o or utils.changeExtension ('cpp', i)
	end,
}

----    now build    ----

--- Module builder, for building each module from it's directory
local function buildModule (submod)
	-- first, build the swig interface
	local interface = swig {
		-- remove "LLVM" prefix from everything, as it will be in the 'llvm'
		-- namespace in lualvm
		cmd = "&&& sed -i 's/\"LLVM/\"/' $output",
		input = submod .. '.i',
	}
	-- submodules
	cpp.shared {
		bin = 'clang++',
		input = '../' .. interface.output,
		flags = llvmFlags .. (Debug and ' -g' or ''),
		links = { luaLib, llvmLib, 'ffi' },
		includes = { luaLib },
		-- std = 'c++11',
		deps = { interface },
		outdir = utils.makePath (hell.outdir, 'lualvm'),
	}
end

-- build each module, pliz
buildModule ('llvm')

copy {
	input = utils.glob '*.lua',
	multinput = true,
}
