----    LLVM    ----
local llvmFlags = llvmFlags or assert (utils.shell ('llvm-config --cxxflags'),
		"Can't run `llvm-config`, do you have it in your PATH?")

local llvmLib = llvmLib or assert (utils.shell ('llvm-config --system-libs --libs all'),
		"Can't run `llvm-config`, do you have it in your PATH?")

-- eliminate unwelcome '\n's
llvmLib = llvmLib:gsub ('\n', ' ')


----    Lua    ----
-- check for lua
local luaLib = luaLib or assert (utils.checkPkgConfig ('lua5.3', 'lua5.2', 'lua'),
		"Can't find lua lib through `pkg-config`, do you have it installed?")


----    now build    ----

--- Module builder, for building each module from it's directory
local function buildModule (dir)
	-- submodules
	local ext = {
		bin = 'clang++',
		input = utils.glob (utils.makePath (dir, '*.cpp')),
		flags = llvmFlags .. (Debug and ' -g' or ''),
		links = { luaLib, llvmLib },
		includes = { '../include', luaLib },
		std = 'c++11',
		outdir = utils.makePath (hell.outdir, 'lualvm', dir),
		multinput = true,
	}
	cpp.shared (ext)
	-- toplevel module
	ext.input = dir .. '.cpp'
	ext.outdir = utils.makePath (hell.outdir, 'lualvm')
	cpp.shared (ext)
end

-- build each module, pliz
buildModule ('core')

copy {
	input = utils.glob '*.lua',
	multinput = true,
}
